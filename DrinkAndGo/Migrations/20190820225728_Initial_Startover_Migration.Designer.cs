// <auto-generated />
using DrinkAndGo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DrinkAndGo.Migrations
{
    [DbContext(typeof(DrinkAndGoContext))]
    [Migration("20190820225728_Initial_Startover_Migration")]
    partial class Initial_Startover_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DrinkAndGo.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId");

                    b.Property<int?>("UserId1");

                    b.HasKey("CartId");

                    b.HasIndex("UserId1");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("DrinkAndGo.Models.Cart_Drink", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("DrinkId");

                    b.Property<int>("DrinkCount");

                    b.HasKey("UserId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.ToTable("Cart_Drinks");
                });

            modelBuilder.Entity("DrinkAndGo.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<string>("Description");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DrinkAndGo.Models.Drink", b =>
                {
                    b.Property<int>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CartId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("ImageThumbnailUrl");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("InStock");

                    b.Property<bool>("IsPreferredDrink");

                    b.Property<string>("LongDescription");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<string>("ShortDescription");

                    b.HasKey("DrinkId");

                    b.HasIndex("CartId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("DrinkAndGo.Models.DrinkCountPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CartId");

                    b.Property<int>("Count");

                    b.Property<int>("DrinkId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("DrinkId");

                    b.ToTable("DrinkCountPairs");
                });

            modelBuilder.Entity("DrinkAndGo.Models.Store", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("RealAdress");

                    b.HasKey("Name");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("DrinkAndGo.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DrinkAndGo.Models.Cart", b =>
                {
                    b.HasOne("DrinkAndGo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("DrinkAndGo.Models.Cart_Drink", b =>
                {
                    b.HasOne("DrinkAndGo.Models.Drink", "Drink")
                        .WithMany("Cart")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrinkAndGo.Models.User", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DrinkAndGo.Models.Drink", b =>
                {
                    b.HasOne("DrinkAndGo.Models.Cart")
                        .WithMany("DrinksWithCount")
                        .HasForeignKey("CartId");

                    b.HasOne("DrinkAndGo.Models.Category", "Category")
                        .WithMany("Drinks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DrinkAndGo.Models.DrinkCountPair", b =>
                {
                    b.HasOne("DrinkAndGo.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrinkAndGo.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
